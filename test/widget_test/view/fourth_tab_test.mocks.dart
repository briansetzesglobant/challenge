// Mocks generated by Mockito 5.4.0 from annotations
// in challenge/test/widget_test/view/fourth_tab_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i8;

import 'package:challenge/src/data/data_source/local/location_data_base.dart'
    as _i2;
import 'package:challenge/src/data/model/location_model/location_model.dart'
    as _i6;
import 'package:challenge/src/presentation/bloc/map_bloc.dart' as _i4;
import 'package:location/location.dart' as _i7;
import 'package:location_platform_interface/location_platform_interface.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLocationDatabase_0 extends _i1.SmartFake
    implements _i2.LocationDatabase {
  _FakeLocationDatabase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLocationData_1 extends _i1.SmartFake implements _i3.LocationData {
  _FakeLocationData_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MapBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMapBloc extends _i1.Mock implements _i4.MapBloc {
  MockMapBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.LocationDatabase get locationDatabase => (super.noSuchMethod(
        Invocation.getter(#locationDatabase),
        returnValue: _FakeLocationDatabase_0(
          this,
          Invocation.getter(#locationDatabase),
        ),
      ) as _i2.LocationDatabase);

  @override
  _i5.Stream<List<_i6.LocationModel>> get locationsStream =>
      (super.noSuchMethod(
        Invocation.getter(#locationsStream),
        returnValue: _i5.Stream<List<_i6.LocationModel>>.empty(),
      ) as _i5.Stream<List<_i6.LocationModel>>);

  @override
  _i5.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> insertLocation(_i6.LocationModel? location) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertLocation,
          [location],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> getLocations() => (super.noSuchMethod(
        Invocation.method(
          #getLocations,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [Location].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocation extends _i1.Mock implements _i7.Location {
  MockLocation() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<_i3.LocationData> get onLocationChanged => (super.noSuchMethod(
        Invocation.getter(#onLocationChanged),
        returnValue: _i5.Stream<_i3.LocationData>.empty(),
      ) as _i5.Stream<_i3.LocationData>);

  @override
  _i5.Future<bool> changeSettings({
    _i3.LocationAccuracy? accuracy = _i3.LocationAccuracy.high,
    int? interval = 1000,
    double? distanceFilter = 0.0,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #changeSettings,
          [],
          {
            #accuracy: accuracy,
            #interval: interval,
            #distanceFilter: distanceFilter,
          },
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> isBackgroundModeEnabled() => (super.noSuchMethod(
        Invocation.method(
          #isBackgroundModeEnabled,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> enableBackgroundMode({bool? enable = true}) =>
      (super.noSuchMethod(
        Invocation.method(
          #enableBackgroundMode,
          [],
          {#enable: enable},
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<_i3.LocationData> getLocation() => (super.noSuchMethod(
        Invocation.method(
          #getLocation,
          [],
        ),
        returnValue: _i5.Future<_i3.LocationData>.value(_FakeLocationData_1(
          this,
          Invocation.method(
            #getLocation,
            [],
          ),
        )),
      ) as _i5.Future<_i3.LocationData>);

  @override
  _i5.Future<_i3.PermissionStatus> hasPermission() => (super.noSuchMethod(
        Invocation.method(
          #hasPermission,
          [],
        ),
        returnValue: _i5.Future<_i3.PermissionStatus>.value(
            _i3.PermissionStatus.granted),
      ) as _i5.Future<_i3.PermissionStatus>);

  @override
  _i5.Future<_i3.PermissionStatus> requestPermission() => (super.noSuchMethod(
        Invocation.method(
          #requestPermission,
          [],
        ),
        returnValue: _i5.Future<_i3.PermissionStatus>.value(
            _i3.PermissionStatus.granted),
      ) as _i5.Future<_i3.PermissionStatus>);

  @override
  _i5.Future<bool> serviceEnabled() => (super.noSuchMethod(
        Invocation.method(
          #serviceEnabled,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> requestService() => (super.noSuchMethod(
        Invocation.method(
          #requestService,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<_i3.AndroidNotificationData?> changeNotificationOptions({
    String? channelName,
    String? title,
    String? iconName,
    String? subtitle,
    String? description,
    _i8.Color? color,
    bool? onTapBringToFront,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #changeNotificationOptions,
          [],
          {
            #channelName: channelName,
            #title: title,
            #iconName: iconName,
            #subtitle: subtitle,
            #description: description,
            #color: color,
            #onTapBringToFront: onTapBringToFront,
          },
        ),
        returnValue: _i5.Future<_i3.AndroidNotificationData?>.value(),
      ) as _i5.Future<_i3.AndroidNotificationData?>);
}
