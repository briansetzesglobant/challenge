// Mocks generated by Mockito 5.4.0 from annotations
// in challenge/test/widget_test/view/third_tab_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:io' as _i5;

import 'package:challenge/src/data/data_source/local/images_storage.dart'
    as _i3;
import 'package:challenge/src/presentation/bloc/image_bloc.dart' as _i4;
import 'package:image_picker/image_picker.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeImagePicker_0 extends _i1.SmartFake implements _i2.ImagePicker {
  _FakeImagePicker_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeImagesStorage_1 extends _i1.SmartFake implements _i3.ImagesStorage {
  _FakeImagesStorage_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ImageBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockImageBloc extends _i1.Mock implements _i4.ImageBloc {
  MockImageBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ImagePicker get imagePicker => (super.noSuchMethod(
        Invocation.getter(#imagePicker),
        returnValue: _FakeImagePicker_0(
          this,
          Invocation.getter(#imagePicker),
        ),
      ) as _i2.ImagePicker);

  @override
  set imagePicker(_i2.ImagePicker? _imagePicker) => super.noSuchMethod(
        Invocation.setter(
          #imagePicker,
          _imagePicker,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set picture(_i2.XFile? _picture) => super.noSuchMethod(
        Invocation.setter(
          #picture,
          _picture,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i5.File> get imagesList => (super.noSuchMethod(
        Invocation.getter(#imagesList),
        returnValue: <_i5.File>[],
      ) as List<_i5.File>);

  @override
  set imagesList(List<_i5.File>? _imagesList) => super.noSuchMethod(
        Invocation.setter(
          #imagesList,
          _imagesList,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<String> get urlsList => (super.noSuchMethod(
        Invocation.getter(#urlsList),
        returnValue: <String>[],
      ) as List<String>);

  @override
  set urlsList(List<String>? _urlsList) => super.noSuchMethod(
        Invocation.setter(
          #urlsList,
          _urlsList,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.ImagesStorage get imagesStorage => (super.noSuchMethod(
        Invocation.getter(#imagesStorage),
        returnValue: _FakeImagesStorage_1(
          this,
          Invocation.getter(#imagesStorage),
        ),
      ) as _i3.ImagesStorage);

  @override
  _i6.Stream<List<_i5.File>> get deviceImagesStream => (super.noSuchMethod(
        Invocation.getter(#deviceImagesStream),
        returnValue: _i6.Stream<List<_i5.File>>.empty(),
      ) as _i6.Stream<List<_i5.File>>);

  @override
  _i6.Stream<List<String>> get storageImagesStream => (super.noSuchMethod(
        Invocation.getter(#storageImagesStream),
        returnValue: _i6.Stream<List<String>>.empty(),
      ) as _i6.Stream<List<String>>);

  @override
  _i6.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool hasSelectedImages() => (super.noSuchMethod(
        Invocation.method(
          #hasSelectedImages,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i6.Future<void> getGalleryImages() => (super.noSuchMethod(
        Invocation.method(
          #getGalleryImages,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> getCameraImages() => (super.noSuchMethod(
        Invocation.method(
          #getCameraImages,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> getStorageImages() => (super.noSuchMethod(
        Invocation.method(
          #getStorageImages,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}
