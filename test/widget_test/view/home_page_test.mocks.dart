// Mocks generated by Mockito 5.4.0 from annotations
// in challenge/test/widget_test/view/home_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:io' as _i14;
import 'dart:ui' as _i18;

import 'package:challenge/src/core/resource/data_state.dart' as _i9;
import 'package:challenge/src/core/use_case/use_case_interface.dart' as _i2;
import 'package:challenge/src/data/data_source/local/images_storage.dart'
    as _i4;
import 'package:challenge/src/data/data_source/local/location_data_base.dart'
    as _i5;
import 'package:challenge/src/data/model/location_model/location_model.dart'
    as _i16;
import 'package:challenge/src/domain/entity/movie/movies_list_entity.dart'
    as _i12;
import 'package:challenge/src/domain/entity/person/persons_list_entity.dart'
    as _i10;
import 'package:challenge/src/presentation/bloc/image_bloc.dart' as _i13;
import 'package:challenge/src/presentation/bloc/map_bloc.dart' as _i15;
import 'package:challenge/src/presentation/bloc/movie_bloc.dart' as _i11;
import 'package:challenge/src/presentation/bloc/person_bloc.dart' as _i7;
import 'package:image_picker/image_picker.dart' as _i3;
import 'package:location/location.dart' as _i17;
import 'package:location_platform_interface/location_platform_interface.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUseCaseInterface_0<T> extends _i1.SmartFake
    implements _i2.UseCaseInterface<T> {
  _FakeUseCaseInterface_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeImagePicker_1 extends _i1.SmartFake implements _i3.ImagePicker {
  _FakeImagePicker_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeImagesStorage_2 extends _i1.SmartFake implements _i4.ImagesStorage {
  _FakeImagesStorage_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLocationDatabase_3 extends _i1.SmartFake
    implements _i5.LocationDatabase {
  _FakeLocationDatabase_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLocationData_4 extends _i1.SmartFake implements _i6.LocationData {
  _FakeLocationData_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PersonBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockPersonBloc extends _i1.Mock implements _i7.PersonBloc {
  MockPersonBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UseCaseInterface<dynamic> get useCaseInterface => (super.noSuchMethod(
        Invocation.getter(#useCaseInterface),
        returnValue: _FakeUseCaseInterface_0<dynamic>(
          this,
          Invocation.getter(#useCaseInterface),
        ),
      ) as _i2.UseCaseInterface<dynamic>);

  @override
  _i8.Stream<_i9.DataState<_i10.PersonsListEntity>> get personsListStream =>
      (super.noSuchMethod(
        Invocation.getter(#personsListStream),
        returnValue: _i8.Stream<_i9.DataState<_i10.PersonsListEntity>>.empty(),
      ) as _i8.Stream<_i9.DataState<_i10.PersonsListEntity>>);

  @override
  _i8.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void getPersonsList() => super.noSuchMethod(
        Invocation.method(
          #getPersonsList,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [MovieBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieBloc extends _i1.Mock implements _i11.MovieBloc {
  MockMovieBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UseCaseInterface<dynamic> get popularUseCase => (super.noSuchMethod(
        Invocation.getter(#popularUseCase),
        returnValue: _FakeUseCaseInterface_0<dynamic>(
          this,
          Invocation.getter(#popularUseCase),
        ),
      ) as _i2.UseCaseInterface<dynamic>);

  @override
  _i2.UseCaseInterface<dynamic> get topRatedUseCase => (super.noSuchMethod(
        Invocation.getter(#topRatedUseCase),
        returnValue: _FakeUseCaseInterface_0<dynamic>(
          this,
          Invocation.getter(#topRatedUseCase),
        ),
      ) as _i2.UseCaseInterface<dynamic>);

  @override
  _i2.UseCaseInterface<dynamic> get recommendationsUseCase =>
      (super.noSuchMethod(
        Invocation.getter(#recommendationsUseCase),
        returnValue: _FakeUseCaseInterface_0<dynamic>(
          this,
          Invocation.getter(#recommendationsUseCase),
        ),
      ) as _i2.UseCaseInterface<dynamic>);

  @override
  _i8.Stream<_i9.DataState<_i12.MoviesListEntity>>
      get popularMoviesListStream => (super.noSuchMethod(
            Invocation.getter(#popularMoviesListStream),
            returnValue:
                _i8.Stream<_i9.DataState<_i12.MoviesListEntity>>.empty(),
          ) as _i8.Stream<_i9.DataState<_i12.MoviesListEntity>>);

  @override
  _i8.Stream<_i9.DataState<_i12.MoviesListEntity>>
      get topRatedMoviesListStream => (super.noSuchMethod(
            Invocation.getter(#topRatedMoviesListStream),
            returnValue:
                _i8.Stream<_i9.DataState<_i12.MoviesListEntity>>.empty(),
          ) as _i8.Stream<_i9.DataState<_i12.MoviesListEntity>>);

  @override
  _i8.Stream<_i9.DataState<_i12.MoviesListEntity>>
      get recommendationsMoviesListStream => (super.noSuchMethod(
            Invocation.getter(#recommendationsMoviesListStream),
            returnValue:
                _i8.Stream<_i9.DataState<_i12.MoviesListEntity>>.empty(),
          ) as _i8.Stream<_i9.DataState<_i12.MoviesListEntity>>);

  @override
  _i8.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void getPopularMoviesList() => super.noSuchMethod(
        Invocation.method(
          #getPopularMoviesList,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<int?> getTopRatedMoviesList() => (super.noSuchMethod(
        Invocation.method(
          #getTopRatedMoviesList,
          [],
        ),
        returnValue: _i8.Future<int?>.value(),
      ) as _i8.Future<int?>);

  @override
  void getRecommendationsMoviesList({required int? id}) => super.noSuchMethod(
        Invocation.method(
          #getRecommendationsMoviesList,
          [],
          {#id: id},
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ImageBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockImageBloc extends _i1.Mock implements _i13.ImageBloc {
  MockImageBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.ImagePicker get imagePicker => (super.noSuchMethod(
        Invocation.getter(#imagePicker),
        returnValue: _FakeImagePicker_1(
          this,
          Invocation.getter(#imagePicker),
        ),
      ) as _i3.ImagePicker);

  @override
  set imagePicker(_i3.ImagePicker? _imagePicker) => super.noSuchMethod(
        Invocation.setter(
          #imagePicker,
          _imagePicker,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set picture(_i3.XFile? _picture) => super.noSuchMethod(
        Invocation.setter(
          #picture,
          _picture,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i14.File> get imagesList => (super.noSuchMethod(
        Invocation.getter(#imagesList),
        returnValue: <_i14.File>[],
      ) as List<_i14.File>);

  @override
  set imagesList(List<_i14.File>? _imagesList) => super.noSuchMethod(
        Invocation.setter(
          #imagesList,
          _imagesList,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<String> get urlsList => (super.noSuchMethod(
        Invocation.getter(#urlsList),
        returnValue: <String>[],
      ) as List<String>);

  @override
  set urlsList(List<String>? _urlsList) => super.noSuchMethod(
        Invocation.setter(
          #urlsList,
          _urlsList,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.ImagesStorage get imagesStorage => (super.noSuchMethod(
        Invocation.getter(#imagesStorage),
        returnValue: _FakeImagesStorage_2(
          this,
          Invocation.getter(#imagesStorage),
        ),
      ) as _i4.ImagesStorage);

  @override
  _i8.Stream<List<_i14.File>> get deviceImagesStream => (super.noSuchMethod(
        Invocation.getter(#deviceImagesStream),
        returnValue: _i8.Stream<List<_i14.File>>.empty(),
      ) as _i8.Stream<List<_i14.File>>);

  @override
  _i8.Stream<List<String>> get storageImagesStream => (super.noSuchMethod(
        Invocation.getter(#storageImagesStream),
        returnValue: _i8.Stream<List<String>>.empty(),
      ) as _i8.Stream<List<String>>);

  @override
  _i8.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool hasSelectedImages() => (super.noSuchMethod(
        Invocation.method(
          #hasSelectedImages,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i8.Future<void> getGalleryImages() => (super.noSuchMethod(
        Invocation.method(
          #getGalleryImages,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> getCameraImages() => (super.noSuchMethod(
        Invocation.method(
          #getCameraImages,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> getStorageImages() => (super.noSuchMethod(
        Invocation.method(
          #getStorageImages,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [MapBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMapBloc extends _i1.Mock implements _i15.MapBloc {
  MockMapBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.LocationDatabase get locationDatabase => (super.noSuchMethod(
        Invocation.getter(#locationDatabase),
        returnValue: _FakeLocationDatabase_3(
          this,
          Invocation.getter(#locationDatabase),
        ),
      ) as _i5.LocationDatabase);

  @override
  _i8.Stream<List<_i16.LocationModel>> get locationsStream =>
      (super.noSuchMethod(
        Invocation.getter(#locationsStream),
        returnValue: _i8.Stream<List<_i16.LocationModel>>.empty(),
      ) as _i8.Stream<List<_i16.LocationModel>>);

  @override
  _i8.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<void> insertLocation(_i16.LocationModel? location) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertLocation,
          [location],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> getLocations() => (super.noSuchMethod(
        Invocation.method(
          #getLocations,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [Location].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocation extends _i1.Mock implements _i17.Location {
  MockLocation() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Stream<_i6.LocationData> get onLocationChanged => (super.noSuchMethod(
        Invocation.getter(#onLocationChanged),
        returnValue: _i8.Stream<_i6.LocationData>.empty(),
      ) as _i8.Stream<_i6.LocationData>);

  @override
  _i8.Future<bool> changeSettings({
    _i6.LocationAccuracy? accuracy = _i6.LocationAccuracy.high,
    int? interval = 1000,
    double? distanceFilter = 0.0,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #changeSettings,
          [],
          {
            #accuracy: accuracy,
            #interval: interval,
            #distanceFilter: distanceFilter,
          },
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> isBackgroundModeEnabled() => (super.noSuchMethod(
        Invocation.method(
          #isBackgroundModeEnabled,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> enableBackgroundMode({bool? enable = true}) =>
      (super.noSuchMethod(
        Invocation.method(
          #enableBackgroundMode,
          [],
          {#enable: enable},
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<_i6.LocationData> getLocation() => (super.noSuchMethod(
        Invocation.method(
          #getLocation,
          [],
        ),
        returnValue: _i8.Future<_i6.LocationData>.value(_FakeLocationData_4(
          this,
          Invocation.method(
            #getLocation,
            [],
          ),
        )),
      ) as _i8.Future<_i6.LocationData>);

  @override
  _i8.Future<_i6.PermissionStatus> hasPermission() => (super.noSuchMethod(
        Invocation.method(
          #hasPermission,
          [],
        ),
        returnValue: _i8.Future<_i6.PermissionStatus>.value(
            _i6.PermissionStatus.granted),
      ) as _i8.Future<_i6.PermissionStatus>);

  @override
  _i8.Future<_i6.PermissionStatus> requestPermission() => (super.noSuchMethod(
        Invocation.method(
          #requestPermission,
          [],
        ),
        returnValue: _i8.Future<_i6.PermissionStatus>.value(
            _i6.PermissionStatus.granted),
      ) as _i8.Future<_i6.PermissionStatus>);

  @override
  _i8.Future<bool> serviceEnabled() => (super.noSuchMethod(
        Invocation.method(
          #serviceEnabled,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> requestService() => (super.noSuchMethod(
        Invocation.method(
          #requestService,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<_i6.AndroidNotificationData?> changeNotificationOptions({
    String? channelName,
    String? title,
    String? iconName,
    String? subtitle,
    String? description,
    _i18.Color? color,
    bool? onTapBringToFront,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #changeNotificationOptions,
          [],
          {
            #channelName: channelName,
            #title: title,
            #iconName: iconName,
            #subtitle: subtitle,
            #description: description,
            #color: color,
            #onTapBringToFront: onTapBringToFront,
          },
        ),
        returnValue: _i8.Future<_i6.AndroidNotificationData?>.value(),
      ) as _i8.Future<_i6.AndroidNotificationData?>);
}
